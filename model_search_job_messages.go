/*
Sumo Logic API

The Search Job API provides third-party scripts and applications access to your log data. The API follows Representational State Transfer (REST) patterns and is optimized for ease of use and consistency. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SearchJobMessages Search Job raw log messages.
type SearchJobMessages struct {
	Fields []SearchJobField `json:"fields,omitempty"`
	Messages []SearchJobMessagesMap `json:"messages,omitempty"`
}

// NewSearchJobMessages instantiates a new SearchJobMessages object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchJobMessages() *SearchJobMessages {
	this := SearchJobMessages{}
	return &this
}

// NewSearchJobMessagesWithDefaults instantiates a new SearchJobMessages object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchJobMessagesWithDefaults() *SearchJobMessages {
	this := SearchJobMessages{}
	return &this
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *SearchJobMessages) GetFields() []SearchJobField {
	if o == nil || o.Fields == nil {
		var ret []SearchJobField
		return ret
	}
	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchJobMessages) GetFieldsOk() ([]SearchJobField, bool) {
	if o == nil || o.Fields == nil {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *SearchJobMessages) HasFields() bool {
	if o != nil && o.Fields != nil {
		return true
	}

	return false
}

// SetFields gets a reference to the given []SearchJobField and assigns it to the Fields field.
func (o *SearchJobMessages) SetFields(v []SearchJobField) {
	o.Fields = v
}

// GetMessages returns the Messages field value if set, zero value otherwise.
func (o *SearchJobMessages) GetMessages() []SearchJobMessagesMap {
	if o == nil || o.Messages == nil {
		var ret []SearchJobMessagesMap
		return ret
	}
	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchJobMessages) GetMessagesOk() ([]SearchJobMessagesMap, bool) {
	if o == nil || o.Messages == nil {
		return nil, false
	}
	return o.Messages, true
}

// HasMessages returns a boolean if a field has been set.
func (o *SearchJobMessages) HasMessages() bool {
	if o != nil && o.Messages != nil {
		return true
	}

	return false
}

// SetMessages gets a reference to the given []SearchJobMessagesMap and assigns it to the Messages field.
func (o *SearchJobMessages) SetMessages(v []SearchJobMessagesMap) {
	o.Messages = v
}

func (o SearchJobMessages) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Fields != nil {
		toSerialize["fields"] = o.Fields
	}
	if o.Messages != nil {
		toSerialize["messages"] = o.Messages
	}
	return json.Marshal(toSerialize)
}

type NullableSearchJobMessages struct {
	value *SearchJobMessages
	isSet bool
}

func (v NullableSearchJobMessages) Get() *SearchJobMessages {
	return v.value
}

func (v *NullableSearchJobMessages) Set(val *SearchJobMessages) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchJobMessages) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchJobMessages) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchJobMessages(val *SearchJobMessages) *NullableSearchJobMessages {
	return &NullableSearchJobMessages{value: val, isSet: true}
}

func (v NullableSearchJobMessages) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchJobMessages) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


