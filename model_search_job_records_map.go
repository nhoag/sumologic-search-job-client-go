/*
Sumo Logic API

YOLO! 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SearchJobRecordsMap struct for SearchJobRecordsMap
type SearchJobRecordsMap struct {
	Map *SearchJobRecordsMapMap `json:"map,omitempty"`
}

// NewSearchJobRecordsMap instantiates a new SearchJobRecordsMap object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchJobRecordsMap() *SearchJobRecordsMap {
	this := SearchJobRecordsMap{}
	return &this
}

// NewSearchJobRecordsMapWithDefaults instantiates a new SearchJobRecordsMap object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchJobRecordsMapWithDefaults() *SearchJobRecordsMap {
	this := SearchJobRecordsMap{}
	return &this
}

// GetMap returns the Map field value if set, zero value otherwise.
func (o *SearchJobRecordsMap) GetMap() SearchJobRecordsMapMap {
	if o == nil || o.Map == nil {
		var ret SearchJobRecordsMapMap
		return ret
	}
	return *o.Map
}

// GetMapOk returns a tuple with the Map field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchJobRecordsMap) GetMapOk() (*SearchJobRecordsMapMap, bool) {
	if o == nil || o.Map == nil {
		return nil, false
	}
	return o.Map, true
}

// HasMap returns a boolean if a field has been set.
func (o *SearchJobRecordsMap) HasMap() bool {
	if o != nil && o.Map != nil {
		return true
	}

	return false
}

// SetMap gets a reference to the given SearchJobRecordsMapMap and assigns it to the Map field.
func (o *SearchJobRecordsMap) SetMap(v SearchJobRecordsMapMap) {
	o.Map = &v
}

func (o SearchJobRecordsMap) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Map != nil {
		toSerialize["map"] = o.Map
	}
	return json.Marshal(toSerialize)
}

type NullableSearchJobRecordsMap struct {
	value *SearchJobRecordsMap
	isSet bool
}

func (v NullableSearchJobRecordsMap) Get() *SearchJobRecordsMap {
	return v.value
}

func (v *NullableSearchJobRecordsMap) Set(val *SearchJobRecordsMap) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchJobRecordsMap) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchJobRecordsMap) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchJobRecordsMap(val *SearchJobRecordsMap) *NullableSearchJobRecordsMap {
	return &NullableSearchJobRecordsMap{value: val, isSet: true}
}

func (v NullableSearchJobRecordsMap) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchJobRecordsMap) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


