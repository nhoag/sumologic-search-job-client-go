/*
Sumo Logic API

The Search Job API provides third-party scripts and applications access to your log data. The API follows Representational State Transfer (REST) patterns and is optimized for ease of use and consistency. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SearchJobState State representation for a search job.
type SearchJobState struct {
	// Search job state.
	State *string `json:"state,omitempty"`
	// The number of raw messages found so far.
	MessageCount *int32 `json:"messageCount,omitempty"`
	// A list of histogram buckets.
	HistogramBuckets []HistogramBucket `json:"histogramBuckets,omitempty"`
	PendingErrors []interface{} `json:"pendingErrors,omitempty"`
	PendingWarnings []interface{} `json:"pendingWarnings,omitempty"`
	// The number of aggregated records produced so far.
	RecordCount *int32 `json:"recordCount,omitempty"`
}

// NewSearchJobState instantiates a new SearchJobState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchJobState() *SearchJobState {
	this := SearchJobState{}
	return &this
}

// NewSearchJobStateWithDefaults instantiates a new SearchJobState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchJobStateWithDefaults() *SearchJobState {
	this := SearchJobState{}
	return &this
}

// GetState returns the State field value if set, zero value otherwise.
func (o *SearchJobState) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchJobState) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *SearchJobState) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *SearchJobState) SetState(v string) {
	o.State = &v
}

// GetMessageCount returns the MessageCount field value if set, zero value otherwise.
func (o *SearchJobState) GetMessageCount() int32 {
	if o == nil || o.MessageCount == nil {
		var ret int32
		return ret
	}
	return *o.MessageCount
}

// GetMessageCountOk returns a tuple with the MessageCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchJobState) GetMessageCountOk() (*int32, bool) {
	if o == nil || o.MessageCount == nil {
		return nil, false
	}
	return o.MessageCount, true
}

// HasMessageCount returns a boolean if a field has been set.
func (o *SearchJobState) HasMessageCount() bool {
	if o != nil && o.MessageCount != nil {
		return true
	}

	return false
}

// SetMessageCount gets a reference to the given int32 and assigns it to the MessageCount field.
func (o *SearchJobState) SetMessageCount(v int32) {
	o.MessageCount = &v
}

// GetHistogramBuckets returns the HistogramBuckets field value if set, zero value otherwise.
func (o *SearchJobState) GetHistogramBuckets() []HistogramBucket {
	if o == nil || o.HistogramBuckets == nil {
		var ret []HistogramBucket
		return ret
	}
	return o.HistogramBuckets
}

// GetHistogramBucketsOk returns a tuple with the HistogramBuckets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchJobState) GetHistogramBucketsOk() ([]HistogramBucket, bool) {
	if o == nil || o.HistogramBuckets == nil {
		return nil, false
	}
	return o.HistogramBuckets, true
}

// HasHistogramBuckets returns a boolean if a field has been set.
func (o *SearchJobState) HasHistogramBuckets() bool {
	if o != nil && o.HistogramBuckets != nil {
		return true
	}

	return false
}

// SetHistogramBuckets gets a reference to the given []HistogramBucket and assigns it to the HistogramBuckets field.
func (o *SearchJobState) SetHistogramBuckets(v []HistogramBucket) {
	o.HistogramBuckets = v
}

// GetPendingErrors returns the PendingErrors field value if set, zero value otherwise.
func (o *SearchJobState) GetPendingErrors() []interface{} {
	if o == nil || o.PendingErrors == nil {
		var ret []interface{}
		return ret
	}
	return o.PendingErrors
}

// GetPendingErrorsOk returns a tuple with the PendingErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchJobState) GetPendingErrorsOk() ([]interface{}, bool) {
	if o == nil || o.PendingErrors == nil {
		return nil, false
	}
	return o.PendingErrors, true
}

// HasPendingErrors returns a boolean if a field has been set.
func (o *SearchJobState) HasPendingErrors() bool {
	if o != nil && o.PendingErrors != nil {
		return true
	}

	return false
}

// SetPendingErrors gets a reference to the given []interface{} and assigns it to the PendingErrors field.
func (o *SearchJobState) SetPendingErrors(v []interface{}) {
	o.PendingErrors = v
}

// GetPendingWarnings returns the PendingWarnings field value if set, zero value otherwise.
func (o *SearchJobState) GetPendingWarnings() []interface{} {
	if o == nil || o.PendingWarnings == nil {
		var ret []interface{}
		return ret
	}
	return o.PendingWarnings
}

// GetPendingWarningsOk returns a tuple with the PendingWarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchJobState) GetPendingWarningsOk() ([]interface{}, bool) {
	if o == nil || o.PendingWarnings == nil {
		return nil, false
	}
	return o.PendingWarnings, true
}

// HasPendingWarnings returns a boolean if a field has been set.
func (o *SearchJobState) HasPendingWarnings() bool {
	if o != nil && o.PendingWarnings != nil {
		return true
	}

	return false
}

// SetPendingWarnings gets a reference to the given []interface{} and assigns it to the PendingWarnings field.
func (o *SearchJobState) SetPendingWarnings(v []interface{}) {
	o.PendingWarnings = v
}

// GetRecordCount returns the RecordCount field value if set, zero value otherwise.
func (o *SearchJobState) GetRecordCount() int32 {
	if o == nil || o.RecordCount == nil {
		var ret int32
		return ret
	}
	return *o.RecordCount
}

// GetRecordCountOk returns a tuple with the RecordCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchJobState) GetRecordCountOk() (*int32, bool) {
	if o == nil || o.RecordCount == nil {
		return nil, false
	}
	return o.RecordCount, true
}

// HasRecordCount returns a boolean if a field has been set.
func (o *SearchJobState) HasRecordCount() bool {
	if o != nil && o.RecordCount != nil {
		return true
	}

	return false
}

// SetRecordCount gets a reference to the given int32 and assigns it to the RecordCount field.
func (o *SearchJobState) SetRecordCount(v int32) {
	o.RecordCount = &v
}

func (o SearchJobState) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.MessageCount != nil {
		toSerialize["messageCount"] = o.MessageCount
	}
	if o.HistogramBuckets != nil {
		toSerialize["histogramBuckets"] = o.HistogramBuckets
	}
	if o.PendingErrors != nil {
		toSerialize["pendingErrors"] = o.PendingErrors
	}
	if o.PendingWarnings != nil {
		toSerialize["pendingWarnings"] = o.PendingWarnings
	}
	if o.RecordCount != nil {
		toSerialize["recordCount"] = o.RecordCount
	}
	return json.Marshal(toSerialize)
}

type NullableSearchJobState struct {
	value *SearchJobState
	isSet bool
}

func (v NullableSearchJobState) Get() *SearchJobState {
	return v.value
}

func (v *NullableSearchJobState) Set(val *SearchJobState) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchJobState) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchJobState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchJobState(val *SearchJobState) *NullableSearchJobState {
	return &NullableSearchJobState{value: val, isSet: true}
}

func (v NullableSearchJobState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchJobState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


